package storage

import (
	"bytes"
	"context"
	"fmt"
	"github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
	sdk "github.com/yandex-cloud/go-sdk"
	"github.com/yandex-cloud/go-sdk/iamkey"
	"io"
	"log"
	"net/http"
	"os"
)

func NewSDK() {
	log.Println("üî• –§—É–Ω–∫—Ü–∏—è NewSDK() –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
	if _, err := os.Stat("authorized_key.json"); os.IsNotExist(err) {
		log.Fatalf("–§–∞–π–ª authorized_key.json –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
	}

	// –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–∞
	key, err := iamkey.ReadFromJSONFile("authorized_key.json")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∫–ª—é—á–∞: %v", err)
	}
	fmt.Printf("key=%s", key)

	// –ö—Ä–µ–¥—ã
	creds, err := sdk.ServiceAccountKey(key)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–µ–¥–æ–≤: %v", err)
	}

	// SDK
	ycsdk, err := sdk.Build(context.Background(), sdk.Config{
		Credentials: creds,
	})
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDK: %v", err)
	}

	// –í—ã–≤–æ–¥–∏–º –æ–±–ª–∞–∫–∞
	resp, err := ycsdk.ResourceManager().Cloud().List(context.Background(), &resourcemanager.ListCloudsRequest{})
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–∞–∫–æ–≤: %v", err)
	}
	for _, cloud := range resp.Clouds {
		log.Printf("–û–±–ª–∞–∫–æ: %s (%s)", cloud.Name, cloud.Id)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Object Storage —á–µ—Ä–µ–∑ HTTP
	log.Println("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Object Storage...")

	filePath := "./test-photo.jpg"
	bucket := "for9may"
	objectKey := "test-photo.jpg"
	endpoint := "https://storage.yandexcloud.net"
	fullURL := fmt.Sprintf("%s/%s/%s", endpoint, bucket, objectKey)

	fileBytes, err := os.ReadFile(filePath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º IAM-—Ç–æ–∫–µ–Ω
	iamToken := ycsdk.IAM()
	fmt.Printf("iam token = %s", iamToken.IamToken)

	// –§–æ—Ä–º–∏—Ä—É–µ–º PUT-–∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest(http.MethodPut, fullURL, bytes.NewReader(fileBytes))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", iamToken.IamToken))
	req.Header.Set("Content-Type", "application/octet-stream")

	respHTTP, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer respHTTP.Body.Close()

	if respHTTP.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(respHTTP.Body)
		log.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç Object Storage: %s\n%s", respHTTP.Status, body)
	}

	log.Println("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Object Storage!")
}
