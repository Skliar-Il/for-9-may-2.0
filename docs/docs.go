// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/medal": {
            "get": {
                "tags": [
                    "Medal"
                ],
                "responses": {}
            }
        },
        "/medal/create": {
            "post": {
                "tags": [
                    "Medal"
                ],
                "parameters": [
                    {
                        "description": "Create medal",
                        "name": "medal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateMedalModel"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/person": {
            "get": {
                "description": "Retrieve person data with optional status check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Get person information list",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Status check flag",
                        "name": "check",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/model.PersonModel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/web.BadRequestError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.InternalServerError"
                        }
                    }
                }
            }
        },
        "/person/count": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PersonCountModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.UnAuthorizedError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.InternalServerError"
                        }
                    }
                }
            }
        },
        "/person/create": {
            "post": {
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "description": "New Person",
                        "name": "person",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreatePersonModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/person/validate/{id}": {
            "patch": {
                "description": "status switch status check on true",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "ValidatePerson person",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/web.BadRequestError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/web.InternalServerError"
                        }
                    }
                }
            }
        },
        "/person/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves complete information about a person by their ID, including medal awards",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Get person details",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Person's unique identifier (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved person data",
                        "schema": {
                            "$ref": "#/definitions/model.PersonModel"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Person not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/persons/{id}": {
            "put": {
                "description": "Updates existing person's data by ID with provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Person"
                ],
                "summary": "Update person information",
                "parameters": [
                    {
                        "description": "Person data to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PersonModel"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content (successful update with no response body)"
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/web.ValidationError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Person not found"
                    },
                    "422": {
                        "description": "Validation error",
                        "schema": {
                            "$ref": "#/definitions/web.ValidationError"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/profile/login": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Authenticate admin with basic auth",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login admin",
                "responses": {
                    "200": {
                        "description": "Authorization OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProfileLoginResponse"
                        }
                    },
                    "401": {
                        "description": "Authorization error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/refresh": {
            "post": {
                "description": "Refresh access and refresh tokens for admin",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh admin tokens",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ProfileLoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CreateMedalModel": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "photo_link": {
                    "type": "string"
                }
            }
        },
        "model.CreatePersonModel": {
            "type": "object",
            "required": [
                "contact_email",
                "contact_name",
                "contact_patronymic",
                "contact_surname",
                "contact_telegram",
                "history",
                "medals",
                "name",
                "patronymic",
                "rank",
                "relative",
                "role",
                "surname"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string"
                },
                "contact_patronymic": {
                    "type": "string"
                },
                "contact_surname": {
                    "type": "string"
                },
                "contact_telegram": {
                    "type": "string"
                },
                "date_birth": {
                    "type": "integer"
                },
                "date_death": {
                    "type": "integer"
                },
                "history": {
                    "type": "string"
                },
                "medals": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "rank": {
                    "type": "string"
                },
                "relative": {
                    "type": "string"
                },
                "role": {
                    "type": "boolean"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "model.MedalModel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "photo_link": {
                    "type": "string"
                }
            }
        },
        "model.PersonCountModel": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "model.PersonModel": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "contact_email": {
                    "type": "string"
                },
                "contact_name": {
                    "type": "string"
                },
                "contact_patronymic": {
                    "type": "string"
                },
                "contact_surname": {
                    "type": "string"
                },
                "contact_telegram": {
                    "type": "string"
                },
                "date_birth": {
                    "type": "integer"
                },
                "date_death": {
                    "type": "integer"
                },
                "history": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "medals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MedalModel"
                    }
                },
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "rank": {
                    "type": "string"
                },
                "relative": {
                    "type": "string"
                },
                "status_check": {
                    "type": "boolean"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "model.ProfileLoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "web.BadRequestError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "web.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "web.InternalServerError": {
            "type": "object"
        },
        "web.UnAuthorizedError": {
            "type": "object"
        },
        "web.ValidationError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Polk Sirius",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
