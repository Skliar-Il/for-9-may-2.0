basePath: /api
definitions:
  dto.CreateGalleryPostDTO:
    properties:
      date:
        type: string
      description:
        type: string
    type: object
  dto.CreateMedalDTO:
    properties:
      name:
        type: string
      photo_link:
        type: string
    type: object
  dto.CreatePersonDTO:
    properties:
      city:
        type: string
      contact_email:
        type: string
      contact_name:
        type: string
      contact_patronymic:
        type: string
      contact_surname:
        type: string
      contact_telegram:
        type: string
      date_birth:
        type: integer
      date_death:
        type: integer
      history:
        type: string
      medals:
        items:
          type: integer
        type: array
      name:
        type: string
      patronymic:
        type: string
      rank:
        type: string
      relative:
        type: string
      surname:
        type: string
    required:
    - contact_email
    - contact_name
    - contact_surname
    - contact_telegram
    - history
    - medals
    - name
    - rank
    - relative
    - surname
    type: object
  dto.CreatePhotoDTO:
    properties:
      link:
        type: string
      main_status:
        type: boolean
      person_id:
        type: string
    type: object
  dto.GalleryPostDTO:
    properties:
      date:
        type: string
      description:
        type: string
      id:
        type: string
      link:
        type: string
    type: object
  dto.MedalDTO:
    properties:
      id:
        type: integer
      name:
        type: string
      photo_link:
        type: string
    type: object
  dto.PersonCountDTO:
    properties:
      count:
        type: integer
    type: object
  dto.PersonDTO:
    properties:
      city:
        type: string
      contact_email:
        type: string
      contact_name:
        type: string
      contact_patronymic:
        type: string
      contact_surname:
        type: string
      contact_telegram:
        type: string
      date_birth:
        type: integer
      date_death:
        type: integer
      date_published:
        type: string
      history:
        type: string
      id:
        type: string
      main_page:
        type: boolean
      medals:
        items:
          $ref: '#/definitions/dto.MedalDTO'
        type: array
      name:
        type: string
      patronymic:
        type: string
      photo:
        items:
          $ref: '#/definitions/dto.PhotoDTO'
        type: array
      rank:
        type: string
      relative:
        type: string
      status_check:
        type: boolean
      surname:
        type: string
    type: object
  dto.PhotoDTO:
    properties:
      id:
        type: integer
      is_main:
        type: boolean
      link:
        type: string
    type: object
  dto.ProfileLoginResponseDTO:
    properties:
      message:
        type: string
    type: object
  dto.UpdatePersonDTO:
    properties:
      city:
        type: string
      contact_email:
        type: string
      contact_name:
        type: string
      contact_patronymic:
        type: string
      contact_surname:
        type: string
      contact_telegram:
        type: string
      date_birth:
        type: integer
      date_death:
        type: integer
      history:
        type: string
      id:
        type: string
      main_page:
        type: boolean
      medals:
        items:
          type: integer
        type: array
      name:
        type: string
      patronymic:
        type: string
      rank:
        type: string
      relative:
        type: string
      surname:
        type: string
    required:
    - contact_email
    - contact_name
    - contact_surname
    - contact_telegram
    - history
    - medals
    - name
    - rank
    - relative
    - surname
    type: object
  web.BadRequestError:
    properties:
      message:
        type: string
    type: object
  web.ErrorResponse:
    properties:
      message: {}
    type: object
  web.InternalServerError:
    type: object
  web.UnAuthorizedError:
    type: object
  web.ValidationError:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
  title: Polk Sirius
  version: "2.0"
paths:
  /gallery:
    get:
      consumes:
      - application/json
      description: get posts
      produces:
      - application/json
      responses:
        "200":
          description: posts
          schema:
            $ref: '#/definitions/dto.GalleryPostDTO'
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/web.InternalServerError'
      summary: get posts
      tags:
      - Gallery
    post:
      consumes:
      - application/json
      description: create new post in gallery
      parameters:
      - description: post in gallery info
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGalleryPostDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/web.InternalServerError'
      summary: create new post
      tags:
      - Gallery
  /gallery/{id}:
    delete:
      consumes:
      - application/json
      description: delete post from gallery
      parameters:
      - description: post id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/web.InternalServerError'
      summary: delete post
      tags:
      - Gallery
  /gallery/file/upload/{id}:
    post:
      consumes:
      - multipart/form-data
      description: Upload file, use only .jpg and .png
      parameters:
      - description: Image file (jpeg/png)
        in: formData
        name: file
        required: true
        type: file
      - description: post id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
      summary: upload file
      tags:
      - Gallery
  /medal:
    get:
      responses: {}
      tags:
      - Medal
    put:
      parameters:
      - description: medal
        in: body
        name: medal
        required: true
        schema:
          $ref: '#/definitions/dto.MedalDTO'
      responses: {}
      tags:
      - Medal
  /medal/{id}:
    delete:
      parameters:
      - description: medal id
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      tags:
      - Medal
  /medal/create:
    post:
      parameters:
      - description: Create medal
        in: body
        name: medal
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMedalDTO'
      responses: {}
      tags:
      - Medal
  /person:
    get:
      consumes:
      - application/json
      description: Retrieve person data with optional status check
      parameters:
      - default: true
        description: status on main page
        in: query
        name: status
        required: true
        type: boolean
      - default: true
        description: Status check flag
        in: query
        name: check
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/dto.PersonDTO'
              type: array
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/web.BadRequestError'
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/web.InternalServerError'
      summary: Get person information list
      tags:
      - Person
    put:
      consumes:
      - application/json
      description: Updates existing person's data by ID with provided information
      parameters:
      - description: Person data to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePersonDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No content (successful update with no response body)
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/web.ValidationError'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Person not found
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/web.ValidationError'
        "500":
          description: Internal server error
      summary: Update person information
      tags:
      - Person
  /person/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal Server Error
      tags:
      - Person
    get:
      consumes:
      - application/json
      description: Retrieves complete information about a person by their ID, including
        medal awards
      parameters:
      - description: Person's unique identifier (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved person data
          schema:
            $ref: '#/definitions/dto.PersonDTO'
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Person not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get person details
      tags:
      - Person
  /person/count:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PersonCountDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.UnAuthorizedError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.InternalServerError'
      tags:
      - Person
  /person/create:
    post:
      parameters:
      - description: New Person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePersonDTO'
      responses:
        "201":
          description: Created
        "422":
          description: Unprocessable Entity
      tags:
      - Person
  /person/file/delete/{id}:
    delete:
      description: delete person photo
      parameters:
      - description: photo id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
      summary: delete photo
      tags:
      - Person
  /person/file/upload/{id}:
    post:
      consumes:
      - multipart/form-data
      description: Upload file to s3 storage, use only .jpg and .png
      parameters:
      - description: Image file (jpeg/png)
        in: formData
        name: file
        required: true
        type: file
      - description: use as main photo (default false)
        in: query
        name: main
        required: true
        type: boolean
      - description: person id
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreatePhotoDTO'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "413":
          description: Request Entity Too Large
        "500":
          description: Internal Server Error
      summary: upload file
      tags:
      - Person
  /person/validate/{id}:
    patch:
      consumes:
      - application/json
      description: status switch status check on true
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/web.BadRequestError'
        "422":
          description: Unprocessable Entity
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/web.InternalServerError'
      summary: ValidatePerson person
      tags:
      - Person
  /profile/login:
    post:
      consumes:
      - application/json
      description: Authenticate admin with basic auth
      produces:
      - application/json
      responses:
        "200":
          description: Authorization OK
          schema:
            $ref: '#/definitions/dto.ProfileLoginResponseDTO'
        "401":
          description: Authorization error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Login admin
      tags:
      - Auth
  /profile/refresh:
    post:
      description: Refresh access and refresh tokens for admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProfileLoginResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/web.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/web.ErrorResponse'
      summary: Refresh admin tokens
      tags:
      - Auth
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
